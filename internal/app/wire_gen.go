// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/derangga/shopifyx/internal/config"
	"github.com/derangga/shopifyx/internal/http"
	"github.com/derangga/shopifyx/internal/http/handler"
	"github.com/derangga/shopifyx/internal/repository"
	"github.com/derangga/shopifyx/internal/usecase"
)

// Injectors from wire.go:

func InitHTTPServer(cfg *config.Config) http.HttpServer {
	databaseConfig := provideDBConfig(cfg)
	db := provideDB(databaseConfig)
	userRepository := repository.NewUserRepository(db)
	unitOfWork := repository.NewUnitOfWork(db)
	authConfig := provideAuthConfig(cfg)
	authUsecase := usecase.NewAuthUsecase(userRepository, unitOfWork, authConfig)
	validate := provideValidator()
	authHandler := handler.NewAuthHandler(authUsecase, validate)
	bankRepository := repository.NewBankRepository(db)
	bankUsecase := usecase.NewBankUsecase(bankRepository)
	bankHandler := handler.NewBankHandler(bankUsecase, validate)
	productRepository := repository.NewProductRepository(db)
	productUsecase := usecase.NewProductUsecase(productRepository, unitOfWork)
	productHandler := handler.NewProductHandler(productUsecase, validate)
	bucketConfig := provideBucketConfig(cfg)
	s3 := provideS3Client(bucketConfig)
	imageRepository := repository.NewImageRepository(s3)
	imageUsecase := usecase.NewImageUsecase(imageRepository, bucketConfig)
	imageHandler := handler.NewImageHandler(imageUsecase, validate)
	paymentRepository := repository.NewPaymentRepository(db)
	paymentUsecase := usecase.NewPaymentUsecase(paymentRepository, productRepository, bankRepository, unitOfWork)
	paymentHandler := handler.NewPaymentHandler(paymentUsecase, validate)
	handlers := handler.NewHandlers(authHandler, bankHandler, productHandler, imageHandler, paymentHandler)
	jwtAuth := provideJWTAuth(authConfig)
	httpServer := http.NewHttpServer(cfg, handlers, jwtAuth)
	return httpServer
}
